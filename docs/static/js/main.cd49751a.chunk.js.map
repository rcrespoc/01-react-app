{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/Spinner.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","el","type","onChange","target","value","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","item","id","title","images","downsized","GifGridItem","className","src","alt","Spinner","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAc9C,OACE,sBAAMC,SAXc,SAACC,GACrBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAE,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,MAOhB,SACE,uBACEO,KAAO,OACPC,SAPqB,SAACN,GAC1BF,EAAcE,EAAEO,OAAOC,QAOnBA,MAASX,O,+BCtBJY,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAAUH,GADpF,sBAEEI,MAAMF,GAFR,cAEfG,EAFe,gBAGAA,EAASC,OAHT,uBAGdC,EAHc,EAGdA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZV,IAAKQ,EAAKG,OAAOC,UAAUZ,QARV,kBAWdM,GAXc,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACtC,OACE,sBAAKc,UAAU,OAAf,UACE,qBACEC,IAAOf,EACPgB,IAAON,IAET,4BAAIA,QCPGO,EAAU,WACrB,OACI,sBAAKH,UAAU,WAAf,UACE,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,qBCLVI,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACNzB,EAAQC,GACLyB,MAAK,SAAAC,GACJH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGhB,CAACrB,IAEGsB,EDZiBK,CAAa3B,GAA9BO,EAF8B,EAE9BA,KAAMc,EAFwB,EAExBA,QAEb,OACE,qCACA,oBAAIL,UAAU,cAAd,SAA6BhB,IAC5BqB,GAAW,cAAC,EAAD,IACZ,qBAAKL,UAAU,YAAf,SACGT,EAAKE,KAAI,SAAAmB,GACR,OAAO,cAAC,EAAD,eAEDA,GADGA,EAAIjB,aEZRkB,EAAe,WAAO,IAAD,EAEI3C,mBAAS,CAAC,WAFd,mBAEzB4C,EAFyB,KAEb7C,EAFa,KAIhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BACG6C,EAAWrB,KAAK,SAAAf,GAAE,OACjB,cAAC,EAAD,CAEEM,SAAYN,GADLA,Y,MCXnBqC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.cd49751a.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  \r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handlerSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length > 2){\r\n      setCategories(el => [inputValue, ...el]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n  const handlerInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n  return (\r\n    <form onSubmit = {handlerSubmit}>\r\n      <input \r\n        type = \"text\"\r\n        onChange = {handlerInputChange}\r\n        value = {inputValue}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=sKopEyLNARx0QpRCvdr6UW1dXjje7ngT&q=${encodeURI(category)}&limit=10`;\r\n  const response = await fetch(url);\r\n  const {data} = await response.json();\r\n  const gifs = data.map( item => {\r\n    return {\r\n      id: item.id,\r\n      title: item.title,\r\n      url: item.images.downsized.url\r\n    }\r\n  })\r\n  return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img\r\n        src = {url}\r\n        alt = {title}\r\n      />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Spinner = () => {\r\n  return (\r\n      <div className=\"sk-chase\">\r\n        <div className=\"sk-chase-dot\"></div>\r\n        <div className=\"sk-chase-dot\"></div>\r\n        <div className=\"sk-chase-dot\"></div>\r\n        <div className=\"sk-chase-dot\"></div>\r\n        <div className=\"sk-chase-dot\"></div>\r\n        <div className=\"sk-chase-dot\"></div>\r\n      </div>\r\n  )\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { Spinner } from './Spinner' \r\n\r\nexport const GifGrid = ({category}) => {\r\n  \r\n  const {data, loading} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n    <h3 className=\"text-center\">{category}</h3>\r\n    {loading && <Spinner />}\r\n    <div className=\"card-grid\">\r\n      {data.map(img => {\r\n        return <GifGridItem \r\n          key = {img.id}\r\n          {...img}\r\n        />\r\n      })}\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect(() => {\r\n      getGifs(category)\r\n        .then(imgs => {\r\n          setState({\r\n            data: imgs,\r\n            loading: false\r\n          })\r\n        })\r\n  }, [category])\r\n\r\n  return state;\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['YuGiOh'])\r\n\r\n  return (\r\n    <>\r\n      <h1>GifExpertApp</h1>\r\n      <AddCategory setCategories = {setCategories}/>\r\n      <hr />\r\n      <ol>\r\n        {categories.map( el => (\r\n          <GifGrid\r\n            key = {el}\r\n            category = {el}\r\n          />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}